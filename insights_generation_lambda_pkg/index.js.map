{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { createClient } from '@connectrpc/connect';\nimport { createGrpcTransport } from '@connectrpc/connect-node';\nimport {\n\tGenerateInsightsResponse,\n\tWMSService,\n} from './gen/wms/v1/transac_ai_wms_pb';\n\n/**\n  Lambda handler function to submit a new request to the Workload Manager Service (WMS) to \n  generate insights for transactions that occurred in the last 10 minutes.\n\n  For this demo, these transactions are being generated by a different Lambda \n  function deployed through the demo-transaction-injector project.\n */\nexport async function insights_generation_handler() {\n\ttry {\n\t\tconst requestId = await submit_insights_generation_request();\n\t\treturn {\n\t\t\tstatusCode: 200,\n\t\t\tbody: JSON.stringify({\n\t\t\t\tmessage: 'Request submitted to WMS',\n\t\t\t\trequestId,\n\t\t\t}),\n\t\t};\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\treturn {\n\t\t\tstatusCode: 500,\n\t\t\tbody: JSON.stringify({\n\t\t\t\tmessage: 'Error submitting request to WMS',\n\t\t\t}),\n\t\t};\n\t}\n}\n\n/**\n  Method to submit a new request to the Workload Manager Service (WMS) to \n  generate insights for transactions that occurred in the last 10 minutes.\n\n  For this demo, these transactions are being generated by a different Lambda \n  function deployed through the demo-transaction-injector project.\n */\nasync function submit_insights_generation_request(): Promise<string> {\n\t// catch all expect\n\tconsole.log('Submitting request to WMS');\n\n\t// -------------------------------------------------\n\t// Verify all required environment variables are set\n\tconst required_env_vars = [\n\t\t'WMS_API_URL',\n\t\t'WMS_API_KEY',\n\t\t'CLIENT_ID',\n\t\t'RECORDS_SOURCE_ID',\n\t\t'PROMPT_TEMPLATES_SOURCE_ID',\n\t\t'PROMPT_ID',\n\t];\n\trequired_env_vars.forEach((env_var) => {\n\t\tif (!process.env[env_var]) {\n\t\t\tthrow new Error(\n\t\t\t\t`Missing required environment variable: ${env_var}`\n\t\t\t);\n\t\t}\n\t});\n\n\t// -------------------------------------------------\n\t// Create a Connect transport instance to communicate with the WMS\n\tconst transport = createGrpcTransport({\n\t\tbaseUrl: process.env.WMS_API_URL!,\n\t});\n\n\t// -------------------------------------------------\n\t// Create a WMS Service Connect client\n\tconst client = createClient(WMSService, transport);\n\n\t// -------------------------------------------------\n\t// Prepare request parameters\n\tconst requestParams = {\n\t\tclientId: process.env.CLIENT_ID!,\n\t\tpromptId: parseInt(process.env.PROMPT_ID!),\n\t\trecordsSourceId: process.env.RECORDS_SOURCE_ID!,\n\t\tpromptTemplatesSourceId: process.env.PROMPT_TEMPLATES_SOURCE_ID!,\n\t\t// fromTime: 10 minutes ago in ISO format\n\t\tfromTime: new Date(Date.now() - 10 * 60 * 1000).toISOString(),\n\t\t// toTime: now in ISO format\n\t\ttoTime: new Date().toISOString(),\n\t};\n\n\t// -------------------------------------------------\n\t// Submit the request to the WMS\n\tconst res: GenerateInsightsResponse = await client.generateInsights(\n\t\trequestParams,\n\t\t{\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${process.env.WMS_API_KEY}`,\n\t\t\t},\n\t\t\ttimeoutMs: 10000, // 10 seconds\n\t\t}\n\t);\n\tconsole.log('Request submitted to WMS. Request ID:', res.requestId);\n\t// return the request ID\n\treturn res.requestId;\n}\n\ninsights_generation_handler()\n\t.then((msg) => {\n\t\tconsole.log(msg);\n\t})\n\t.catch((err) => {\n\t\tconsole.error(err);\n\t});\n"],"names":["insights_generation_handler","requestId","submit_insights_generation_request","statusCode","body","JSON","stringify","message","error","console","log","required_env_vars","forEach","env_var","process","env","Error","transport","createGrpcTransport","baseUrl","WMS_API_URL","client","createClient","WMSService","requestParams","clientId","CLIENT_ID","promptId","parseInt","PROMPT_ID","recordsSourceId","RECORDS_SOURCE_ID","promptTemplatesSourceId","PROMPT_TEMPLATES_SOURCE_ID","fromTime","Date","now","toISOString","toTime","res","generateInsights","headers","Authorization","WMS_API_KEY","timeoutMs","then","msg","catch","err"],"mappings":"2CAcsBA,qEAAAA,sDAdO,kDACO,6DAI7B,kCASA,eAAeA,8BACrB,GAAI,CACH,MAAMC,UAAY,MAAMC,qCACxB,MAAO,CACNC,WAAY,IACZC,KAAMC,KAAKC,SAAS,CAAC,CACpBC,QAAS,2BACTN,SACD,EACD,CACD,CAAE,MAAOO,MAAO,CACfC,QAAQD,KAAK,CAACA,OACd,MAAO,CACNL,WAAY,IACZC,KAAMC,KAAKC,SAAS,CAAC,CACpBC,QAAS,iCACV,EACD,CACD,CACD,CASA,eAAeL,qCAEdO,QAAQC,GAAG,CAAC,6BAIZ,MAAMC,kBAAoB,CACzB,cACA,cACA,YACA,oBACA,6BACA,YACA,CACDA,kBAAkBC,OAAO,CAAC,AAACC,UAC1B,GAAI,CAACC,QAAQC,GAAG,CAACF,QAAQ,CAAE,CAC1B,MAAM,IAAIG,MACT,CAAC,uCAAuC,EAAEH,QAAQ,CAAC,CAErD,CACD,GAIA,MAAMI,UAAYC,GAAAA,gCAAmB,EAAC,CACrCC,QAASL,QAAQC,GAAG,CAACK,WAAW,AACjC,GAIA,MAAMC,OAASC,GAAAA,qBAAY,EAACC,6BAAU,CAAEN,WAIxC,MAAMO,cAAgB,CACrBC,SAAUX,QAAQC,GAAG,CAACW,SAAS,CAC/BC,SAAUC,SAASd,QAAQC,GAAG,CAACc,SAAS,EACxCC,gBAAiBhB,QAAQC,GAAG,CAACgB,iBAAiB,CAC9CC,wBAAyBlB,QAAQC,GAAG,CAACkB,0BAA0B,CAE/DC,SAAU,IAAIC,KAAKA,KAAKC,GAAG,GAAK,GAAK,GAAK,KAAMC,WAAW,GAE3DC,OAAQ,IAAIH,OAAOE,WAAW,EAC/B,EAIA,MAAME,IAAgC,MAAMlB,OAAOmB,gBAAgB,CAClEhB,cACA,CACCiB,QAAS,CACRC,cAAe,CAAC,OAAO,EAAE5B,QAAQC,GAAG,CAAC4B,WAAW,CAAC,CAAC,AACnD,EACAC,UAAW,GACZ,GAEDnC,QAAQC,GAAG,CAAC,wCAAyC6B,IAAItC,SAAS,EAElE,OAAOsC,IAAItC,SAAS,AACrB,CAEAD,8BACE6C,IAAI,CAAC,AAACC,MACNrC,QAAQC,GAAG,CAACoC,IACb,GACCC,KAAK,CAAC,AAACC,MACPvC,QAAQD,KAAK,CAACwC,IACf"}