"use strict";Object.defineProperty(exports,"insights_generation_handler",{enumerable:true,get:function(){return insights_generation_handler}});const _connect=require("@connectrpc/connect");const _connectnode=require("@connectrpc/connect-node");const _transac_ai_wms_pb=require("./gen/wms/v1/transac_ai_wms_pb");async function insights_generation_handler(){try{const requestId=await submit_insights_generation_request();return{statusCode:200,body:JSON.stringify({message:"Request submitted to WMS",requestId})}}catch(error){console.error(error);return{statusCode:500,body:JSON.stringify({message:"Error submitting request to WMS"})}}}async function submit_insights_generation_request(){console.log("Submitting request to WMS");const required_env_vars=["WMS_API_URL","WMS_API_KEY","CLIENT_ID","RECORDS_SOURCE_ID","PROMPT_TEMPLATES_SOURCE_ID","PROMPT_ID"];required_env_vars.forEach(env_var=>{if(!process.env[env_var]){throw new Error(`Missing required environment variable: ${env_var}`)}});const transport=(0,_connectnode.createGrpcTransport)({baseUrl:process.env.WMS_API_URL});const client=(0,_connect.createClient)(_transac_ai_wms_pb.WMSService,transport);const requestParams={clientId:process.env.CLIENT_ID,promptId:parseInt(process.env.PROMPT_ID),recordsSourceId:process.env.RECORDS_SOURCE_ID,promptTemplatesSourceId:process.env.PROMPT_TEMPLATES_SOURCE_ID,fromTime:new Date(Date.now()-10*60*1e3).toISOString(),toTime:new Date().toISOString()};const res=await client.generateInsights(requestParams,{headers:{Authorization:`Bearer ${process.env.WMS_API_KEY}`},timeoutMs:1e4});console.log("Request submitted to WMS. Request ID:",res.requestId);return res.requestId}insights_generation_handler().then(msg=>{console.log(msg)}).catch(err=>{console.error(err)});
//# sourceMappingURL=index.js.map