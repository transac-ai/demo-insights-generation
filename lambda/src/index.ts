import { createClient } from '@connectrpc/connect';
import { createGrpcTransport } from '@connectrpc/connect-node';
import {
	GenerateInsightsResponse,
	WMSService,
} from './gen/wms/v1/transac_ai_wms_pb';

/**
  Lambda handler function to submit a new request to the Workload Manager Service (WMS) to 
  generate insights for transactions that occurred in the last 10 minutes.

  For this demo, these transactions are being generated by a different Lambda 
  function deployed through the demo-transaction-injector project.
 */
export async function insights_generation_handler() {
	try {
		const requestId = await submit_insights_generation_request();
		return {
			statusCode: 200,
			body: JSON.stringify({
				message: 'Request submitted to WMS',
				requestId,
			}),
		};
	} catch (error) {
		console.error(error);
		return {
			statusCode: 500,
			body: JSON.stringify({
				message: 'Error submitting request to WMS',
			}),
		};
	}
}

/**
  Method to submit a new request to the Workload Manager Service (WMS) to 
  generate insights for transactions that occurred in the last 10 minutes.

  For this demo, these transactions are being generated by a different Lambda 
  function deployed through the demo-transaction-injector project.
 */
async function submit_insights_generation_request(): Promise<string> {
	// catch all expect
	console.log('Submitting request to WMS');

	// -------------------------------------------------
	// Verify all required environment variables are set
	const required_env_vars = [
		'WMS_API_URL',
		'WMS_API_KEY',
		'CLIENT_ID',
		'RECORDS_SOURCE_ID',
		'PROMPT_TEMPLATES_SOURCE_ID',
		'PROMPT_ID',
	];
	required_env_vars.forEach((env_var) => {
		if (!process.env[env_var]) {
			throw new Error(
				`Missing required environment variable: ${env_var}`
			);
		}
	});

	// -------------------------------------------------
	// Create a Connect transport instance to communicate with the WMS
	const transport = createGrpcTransport({
		baseUrl: process.env.WMS_API_URL!,
	});

	// -------------------------------------------------
	// Create a WMS Service Connect client
	const client = createClient(WMSService, transport);

	// -------------------------------------------------
	// Prepare request parameters
	const requestParams = {
		clientId: process.env.CLIENT_ID!,
		promptId: parseInt(process.env.PROMPT_ID!),
		recordsSourceId: process.env.RECORDS_SOURCE_ID!,
		promptTemplatesSourceId: process.env.PROMPT_TEMPLATES_SOURCE_ID!,
		// fromTime: 10 minutes ago in ISO format
		fromTime: new Date(Date.now() - 10 * 60 * 1000).toISOString(),
		// toTime: now in ISO format
		toTime: new Date().toISOString(),
	};

	// -------------------------------------------------
	// Submit the request to the WMS
	const res: GenerateInsightsResponse = await client.generateInsights(
		requestParams,
		{
			headers: {
				Authorization: `Bearer ${process.env.WMS_API_KEY}`,
			},
			timeoutMs: 10000, // 10 seconds
		}
	);
	console.log('Request submitted to WMS. Request ID:', res.requestId);
	// return the request ID
	return res.requestId;
}

insights_generation_handler()
	.then((msg) => {
		console.log(msg);
	})
	.catch((err) => {
		console.error(err);
	});
